From a771e0b3aca160a691891bdc93bd833aab39a9f5 Mon Sep 17 00:00:00 2001
From: Liam Skinner <Liamdavidskinner@gmail.com>
Date: Fri, 6 Oct 2023 11:09:38 +0100
Subject: [PATCH] TaskTwo: fix React graph

---
 .../.gitignore                                |  2 ++
 .../datafeed/server3.py                       |  2 +-
 .../src/App.tsx                               | 21 +++++++++++++++----
 .../src/Graph.tsx                             | 14 +++++++++++--
 4 files changed, 32 insertions(+), 7 deletions(-)

diff --git a/Task 2 JPMorgan Frameworks and Tools/.gitignore b/Task 2 JPMorgan Frameworks and Tools/.gitignore
index 4d29575..1450972 100644
--- a/Task 2 JPMorgan Frameworks and Tools/.gitignore	
+++ b/Task 2 JPMorgan Frameworks and Tools/.gitignore	
@@ -21,3 +21,5 @@
 npm-debug.log*
 yarn-debug.log*
 yarn-error.log*
+
+.idea/
\ No newline at end of file
diff --git a/Task 2 JPMorgan Frameworks and Tools/datafeed/server3.py b/Task 2 JPMorgan Frameworks and Tools/datafeed/server3.py
index 68f4659..f92c8af 100644
--- a/Task 2 JPMorgan Frameworks and Tools/datafeed/server3.py	
+++ b/Task 2 JPMorgan Frameworks and Tools/datafeed/server3.py	
@@ -339,4 +339,4 @@ if __name__ == '__main__':
     if not os.path.isfile('test.csv'):
         print("No data found, generating...")
         generate_csv()
-    run(App())
+    run(App())
\ No newline at end of file
diff --git a/Task 2 JPMorgan Frameworks and Tools/src/App.tsx b/Task 2 JPMorgan Frameworks and Tools/src/App.tsx
index 0728518..4cd94ce 100644
--- a/Task 2 JPMorgan Frameworks and Tools/src/App.tsx	
+++ b/Task 2 JPMorgan Frameworks and Tools/src/App.tsx	
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,29 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph) {
+      return (<Graph data={this.state.data}/>);
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
+    let x = 0;
+    const interval = setInterval(() => {
+      DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+        this.setState({ data: serverResponds, showGraph: true });
+      });
+
+      x++;
+      if (x > 1000) {
+        clearInterval(interval)
+      }
+    }, 100);
+    
   }
 
   /**
diff --git a/Task 2 JPMorgan Frameworks and Tools/src/Graph.tsx b/Task 2 JPMorgan Frameworks and Tools/src/Graph.tsx
index 3b2a7da..146a370 100644
--- a/Task 2 JPMorgan Frameworks and Tools/src/Graph.tsx	
+++ b/Task 2 JPMorgan Frameworks and Tools/src/Graph.tsx	
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -49,6 +49,16 @@ class Graph extends Component<IProps, {}> {
 
       // Add more Perspective configurations here.
       elem.load(this.table);
+      elem.setAttribute("view", "y_line");
+      elem.setAttribute("column-pivots", '["stock"]');
+      elem.setAttribute("row_pivots", '["timestamp"]');
+      elem.setAttribute("columns", '["top_ask_price"]');
+      elem.setAttribute("aggregates",`
+          {"stock":"distinct_count",
+          "top_ask_price":"avg",
+          "top_bid_price":"avg",
+          "timestamp":"distinct  count"}`
+      );
     }
   }
 
-- 
2.37.3.windows.1

